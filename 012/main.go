package main

import "fmt"

// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

func getTriangleNumber(input int) int {
	result := 0
	for i := 1; i <= input; i++ {
		result += i
	}
	return result
}

func getDivisor(input int) []int {
	result := []int{}

	for i := 1; i*i <= input; i++ {
		if input%i != 0 {
			continue
		}
		result = append(result, i)
		result = append(result, input/i)
	}

	return result
}

func main() {
	i := 0
	result := 0
	for {
		triangleNum := getTriangleNumber(i)
		divisors := getDivisor(triangleNum)

		if len(divisors) >= 500 {
			result = triangleNum
			break
		}
		i++
	}
	fmt.Println(result)
}
